// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TileBasedDeferredLighting
#pragma enable_d3d11_debug_symbols
#pragma multi_compile _ _SSAO_ENABLE
#pragma multi_compile _ _ADDITIONAL_LIGHTS
#pragma multi_compile _ _TILEBASED_LIGHT_CULLING
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
#pragma multi_compile _ _SHADOW_PCSS
#pragma multi_compile _ _SHADOW_VSM
#pragma multi_compile _ _SHADOW_EVSM
#pragma multi_compile _ _SCREENSPACE_SHADOW
#pragma multi_compile _ _TILEBASED_LIGHT_CULLING_DEBUG
#include "LightCullingInclude.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "LitInput.hlsl"
#include "LightInput.hlsl"
#define _TILEBASED_DEFERRED_LIGHTING
#include "Lighting.hlsl"
#include "Shadow/shadows.hlsl"
#include "UnityBuiltIn.hlsl"

Texture2D<float4> _AlbedoMetallic;
Texture2D<float4> _NormalSmoothness;
Texture2D _DepthTexture;
float4x4 _View; //platform unrelative matrix
float4x4 _ProjInverse; //platform unrelative matrix
uint _TotalLightNum;


groupshared uint _MinDepth;
groupshared uint _MaxDepth;
groupshared int _LightList[MAX_LIGHT_NUM_PER_TILE];
groupshared TileAABB _AABBInView;
groupshared uint _TileLightCount;
#ifdef _TILEBASED_LIGHT_CULLING_DEBUG
RWTexture2D<uint> _TileVisibleLightCounts;
#endif

RWTexture2D<float4> _FinalLighting;



[numthreads(TILE_SIZE, TILE_SIZE, 1)]
void TileBasedDeferredLighting(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    float2 screenUV = ((float2) DTid.xy + 0.5) * _ScreenSize.zw;
    
    //first step is to calculate the world position 
    float depth = _DepthTexture.SampleLevel(s_point_clamp_sampler, screenUV, 0);
    float3 positionWS = ComputeWorldSpacePosition(screenUV, depth, _InvViewProjMatrix);
    
    ShadowSampleCoords shadowSample = GetShadowSampleData(positionWS.xyz, screenUV);
    
    // initialize brdf data.
    BRDFData brdfData;
    float4 albedoMetallic = _AlbedoMetallic.SampleLevel(s_point_clamp_sampler, screenUV, 0);
    float4 normalSmoothness = _NormalSmoothness.SampleLevel(s_point_clamp_sampler, screenUV, 0);
    float3 normalWS = 2.0 * normalSmoothness.xyz - 1.0;
    InitializeBRDFData(albedoMetallic.rgb, albedoMetallic.a, 0, normalSmoothness.a, 1.0, brdfData);

    Light mainLight = GetMainLight(shadowSample);
    
    half occlusion = 1;
#ifdef _SSAO_ENABLE
    occlusion = GetScreenSpaceAmbientOcclusion(screenUV);
#endif
    half3 bakedGI = max(half3(0, 0, 0), ShadeSH9(half4(normalWS, 1.0)));
    float3 viewDirectionWS = -normalize(positionWS.xyz); //camera relative rendering, camera position is zero
    half3 color = GlobalIllumination(brdfData, bakedGI, occlusion, positionWS.xyz, normalWS, viewDirectionWS);
    color += LightingPhysicallyBased(brdfData, mainLight, normalWS, viewDirectionWS);
#if defined(_TILEBASED_LIGHT_CULLING)
    //first step, get the tile by groupid
    //uint2 tileId = groupId.xy;
    int groupIndex = GTid.x + GTid.y * TILE_SIZE;
    //Get the tile frustum info
    //_TileIndex = 0;
    int tileIndex = _TileNumber.x * groupId.y + groupId.x;
    if (groupIndex == 0)
    {
        _MinDepth = 0xffffffff;
        _MaxDepth = 0;
        _TileLightCount = 0;
    }
    GroupMemoryBarrierWithGroupSync();
    //compute the min max depth of a tile
    //float depth = _DepthTexture.Load(int3(DTid.xy, 0));
    depth = 1.0 - depth;
    InterlockedMax(_MaxDepth, asuint(depth * 2.0 - 1.0));
    InterlockedMin(_MinDepth, asuint(depth * 2.0 - 1.0));
    GroupMemoryBarrierWithGroupSync();
    
    
    if (groupIndex == 0)
    {
        float maxDepth = asfloat(_MaxDepth);
        float minDepth = asfloat(_MinDepth);
        float2 minInClip = float2(groupId.xy) / _TileNumber * 2.0 - 1.0;
        float2 maxInClip = (float2(groupId.xy) + 1) / _TileNumber * 2.0 - 1.0;
        float4 minInView = mul(_ProjInverse, float4(minInClip, minDepth, 1));
        minInView /= minInView.w;
        float4 maxInView = mul(_ProjInverse, float4(maxInClip, maxDepth, 1));
        maxInView /= maxInView.w;
        _AABBInView.center = (minInView.xyz + maxInView.xyz) * 0.5;
        _AABBInView.extents = (maxInView.xyz - minInView.xyz) * 0.5;
        
        float4 viewSpaceAABB[8];
        //bottom left near corner
        viewSpaceAABB[0] = mul(_ProjInverse, float4(minInClip, minDepth, 1));
        viewSpaceAABB[0] /= viewSpaceAABB[0].w;
        //bottom right near corner
        viewSpaceAABB[1] = mul(_ProjInverse, float4(float2(groupId.x + 1, groupId.y) / _TileNumber * 2.0 - 1.0, minDepth, 1));
        viewSpaceAABB[1] /= viewSpaceAABB[1].w;
        //top left near
        viewSpaceAABB[2] = mul(_ProjInverse, float4(float2(groupId.x, groupId.y + 1) / _TileNumber * 2.0 - 1.0, minDepth, 1));
        viewSpaceAABB[2] /= viewSpaceAABB[2].w;
        //top right near
        viewSpaceAABB[3] = mul(_ProjInverse, float4(float2(groupId.x + 1, groupId.y + 1) / _TileNumber * 2.0 - 1.0, minDepth, 1));
        viewSpaceAABB[3] /= viewSpaceAABB[3].w;
        
        //bottom left far corner
        viewSpaceAABB[4] = mul(_ProjInverse, float4(minInClip, maxDepth, 1));
        viewSpaceAABB[4] /= viewSpaceAABB[4].w;
        //bottom right far corner
        viewSpaceAABB[5] = mul(_ProjInverse, float4(float2(groupId.x + 1, groupId.y) / _TileNumber * 2.0 - 1.0, maxDepth, 1));
        viewSpaceAABB[5] /= viewSpaceAABB[5].w;
        //top left far
        viewSpaceAABB[6] = mul(_ProjInverse, float4(float2(groupId.x, groupId.y + 1) / _TileNumber * 2.0 - 1.0, maxDepth, 1));
        viewSpaceAABB[6] /= viewSpaceAABB[6].w;
        //top right far
        viewSpaceAABB[7] = mul(_ProjInverse, float4(float2(groupId.x + 1, groupId.y + 1) / _TileNumber * 2.0 - 1.0, maxDepth, 1));
        viewSpaceAABB[7] /= viewSpaceAABB[7].w;
        
        float3 minAABB = 10000000;
        float3 maxAABB = -10000000;
		[unroll]
        for (uint i = 0; i < 8; ++i)
        {
            minAABB = min(minAABB, viewSpaceAABB[i].xyz);
            maxAABB = max(maxAABB, viewSpaceAABB[i].xyz);
        }
        _AABBInView.center = (minAABB + maxAABB) * 0.5;
        _AABBInView.extents = maxAABB - _AABBInView.center;
    }
    GroupMemoryBarrierWithGroupSync();
    
    for (int i = groupIndex; i < _TotalLightNum; i += TILE_SIZE * TILE_SIZE)
    {
        GPULight light = _GPUAdditionalLights[i];
        float4 lightPosInView = mul(_View, float4(light.position.xyz, 1));
        lightPosInView /= lightPosInView.w;
        bool intersect = false;
        //if (SphereInsideFrustum(float4(lightPosInView.xyz, light.position.w), _LightGridFrustum, minDepth, maxDepth))
        if (light.direction.w == 0)   //point light
        {
            if (SphereIntersectsAABB(float4(lightPosInView.xyz, light.position.w), _AABBInView))
            {
                intersect = true;
            }
        }
        else //spot light
        {
            float3 directionView = mul(_View, float4(light.direction.xyz, 0));

            directionView = normalize(directionView);
            if (SpotlightVsAABB(lightPosInView.xyz, directionView, light.position.w, light.direction.w, _AABBInView))
            {
                intersect = true;
            }
        }

        if (intersect)
        {
            uint index = 0; // Index into the visible lights array.

            InterlockedAdd(_TileLightCount, 1, index);
            if (index < MAX_LIGHT_NUM_PER_TILE)
            {
                _LightList[index] = i;
            }
        }
    }
    
    GroupMemoryBarrierWithGroupSync();
    for (int i = 0; i < _TileLightCount; ++i)
    {
        half3 diffuseAdditonal = 0;
        int lightIndex = _LightList[i];
        TileBasedAdditionalLightingFragmentPBR(lightIndex, brdfData, positionWS.xyz, normalWS, viewDirectionWS, screenUV, diffuseAdditonal);
        color += diffuseAdditonal;
    }
#ifdef _TILEBASED_LIGHT_CULLING_DEBUG
    if (groupIndex == 0)
    {
        _TileVisibleLightCounts[groupId.xy] = _TileLightCount;
    }
#endif
    #endif
    
    _FinalLighting[DTid.xy] = float4(color, 1);
}
