// Each #kernel tells which function to compile; you can have many kernels
//presum array kernel
#pragma kernel PreSum

//presum group array kernel
#pragma kernel PreSumGroup

//add group sum kernel
#pragma kernel AddGroupSum

#pragma enable_d3d11_debug_symbols

#define THREAD_NUM_X 128
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4>   InputTexture;
RWTexture2D<float4>   OutputTexture;
Texture2D<float4>   GroupSumTexture;
//each thread will caculate 2 elements, so the thread num should be double of the element num.
groupshared float4 TempTexture[THREAD_NUM_X * 2];
uint4 InputTextureSize;
uint2 GroupSumTextureSize;
uint2 InputImageOffset;
float4 ValidRect;
float4 InputTextureST;  //xy scale, zw offset
float4 OutputTextureST; //xy scale, zw offset
bool IsTranposeOutput;

float2 TransformTexUV(float4 st, float2 uv)
{
    return uv * st.xy + st.zw;
}


void PreSumArray(int thid)
{
    int offset = 1;
    //up pass
    for (int d = THREAD_NUM_X; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (thid < d)
        {
            int ai = offset * (2 * thid + 1) - 1;
            int bi = offset * (2 * thid + 2) - 1;
            TempTexture[bi] += TempTexture[ai];
        }
        offset <<= 1;
    }

    //down pass
    //because the fisrt loop should at the sum and the last element, the sum has been already caculate,
    //so the last element should be zero.
    if (thid == 0)
    {
        TempTexture[THREAD_NUM_X * 2 - 1] = float4(0, 0, 0, 0);
    }

    for (int d = 1; d <= THREAD_NUM_X; d *= 2)
    {
        offset >>= 1;
        GroupMemoryBarrierWithGroupSync();
        if (thid < d)
        {
            int ai = offset * (2 * thid + 1) - 1;
            int bi = offset * (2 * thid + 2) - 1;
            float4 t = TempTexture[ai];
            TempTexture[ai] = TempTexture[bi];
            TempTexture[bi] += t;
        }
    }
}

bool IsInValidRect(uint2 textureAddr)
{
    return textureAddr.x >= ValidRect.x && textureAddr.x <= ValidRect.z 
        && textureAddr.y >= ValidRect.y && textureAddr.y <= ValidRect.w;
}

uint2 GroupThreadToInputAddr(uint2 groupThreadId, uint2 groupId)
{
    return uint2(groupId.x * THREAD_NUM_X + groupThreadId.x, groupId.y);
}

[numthreads(THREAD_NUM_X, 1, 1)]
void PreSum (uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    // TODO: insert actual code here!
    uint thid = GTid.x;
    uint2 textureAddr = uint2(2 * thid + groupId.x * THREAD_NUM_X, DTid.y);//uint2(groupId.x * THREAD_NUM_X + thid, groupId.y);
    textureAddr = TransformTexUV(InputTextureST, textureAddr);
    //uint2 thidToInputAddr = GroupThreadToInputAddr(uint2(2 * thid, DTid.y), groupId.xy);
    TempTexture[2 * thid] = IsInValidRect(textureAddr) ? InputTexture[textureAddr] : 0;//textureAddr.x < InputTextureSize.x ? InputTexture[textureAddr] : 0;
    //thidToInputAddr = GroupThreadToInputAddr(uint2(2 * thid + 1, DTid.y), groupId.xy);
    uint2 textureAddrNext = uint2(textureAddr.x + 1, DTid.y);
    TempTexture[2 * thid + 1] = IsInValidRect(textureAddrNext) ? InputTexture[textureAddrNext] : 0;//(textureAddr.x + 1) < InputTextureSize.x ? InputTexture[uint2(textureAddr.x + 1, textureAddr.y)] : 0;
    PreSumArray(thid);

    GroupMemoryBarrierWithGroupSync();
    uint2 outputTextureAddr = uint2(groupId.x * THREAD_NUM_X + thid * 2, DTid.y);
    uint2 outputTextureAddr1 = uint2(groupId.x * THREAD_NUM_X + thid * 2 + 1, DTid.y);
    if ((2 * thid) < THREAD_NUM_X)
    {
        outputTextureAddr = IsTranposeOutput ? outputTextureAddr.yx : outputTextureAddr;
        OutputTexture[outputTextureAddr] = IsInValidRect(outputTextureAddr) ? TempTexture[2 * thid + 1] : 0;
    }
    if ((2 * thid + 1) < THREAD_NUM_X)
    {
        outputTextureAddr1 = IsTranposeOutput ? outputTextureAddr1.yx : outputTextureAddr1;
        OutputTexture[outputTextureAddr1] = IsInValidRect(outputTextureAddr1) ? TempTexture[2 * thid + 2] : 0;
    }
    //if (GTid.x < InputTextureSize.x)
    //    OutputTexture[GTid.xy] = TempTexture[GTid.x];
}

//#define PRESUMGROUP_TREADNUM_X 128
int ArrayLengthPerThreadGroup;
[numthreads(THREAD_NUM_X, 1, 1)]
void PreSumGroup(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    // TODO: insert actual code here!
    uint thid = DTid.x;
    uint2 textureAddr = uint2((2 * thid + 1) * THREAD_NUM_X - 1, groupId.y);
    uint2 textureAddr1 = uint2((2 * thid + 2) * THREAD_NUM_X - 1, groupId.y);
    TempTexture[2 * thid] = textureAddr.x < InputTextureSize.x ? InputTexture[textureAddr] : 0;
    TempTexture[2 * thid + 1] = textureAddr1.x < InputTextureSize.x ? InputTexture[textureAddr1] : 0;

    PreSumArray(thid);

    GroupMemoryBarrierWithGroupSync();
    if ((2 * thid) < ArrayLengthPerThreadGroup)
    {
        uint2 outputAddress = uint2(2 * thid, groupId.y);
        OutputTexture[outputAddress] = TempTexture[2 * thid];
    }
    if ((2 * thid + 1) < ArrayLengthPerThreadGroup)
    {
        uint2 outputAddress = uint2(2 * thid + 1, groupId.y);
        OutputTexture[outputAddress] = TempTexture[2 * thid + 1];
    }
}

[numthreads(THREAD_NUM_X, 1, 1)]
void AddGroupSum(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    float4 groupSum = GroupSumTexture[groupId.xy];
    if (DTid.x < (uint)GroupSumTextureSize.x && DTid.y < (uint)GroupSumTextureSize.y)
    {
        float4 sum = IsTranposeOutput ? InputTexture[DTid.xy] : OutputTexture[DTid.xy];
        uint2 outputAddress = IsTranposeOutput ? DTid.yx : DTid.xy;
        OutputTexture[outputAddress] = IsInValidRect(DTid.xy) ? sum + groupSum : 0;
    }
}
