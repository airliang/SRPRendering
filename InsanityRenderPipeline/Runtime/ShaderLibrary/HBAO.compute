#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"

#pragma kernel HBAO
#pragma enable_d3d11_debug_symbols
#define PI 3.14159265358979323846
#define TWO_PI 6.28318530717958647693

RWTexture2D<float> _AOMask;
Texture2D<float4> _NormalTexture;
Texture2D<float> _NoiseTexture;
Texture2D _DepthTexture;
float4x4 _ViewMatrix;  //platform unrelative matrix
float4x4 _ProjInverse; //platform unrelative matrix
float4x4 _ViewInverse; //use for test
float4 _HBAOParams;   
float4 _AOMaskSize;
float4 _ScreenSize;    //xy width and height, zw 1/width and 1/height
float _HalfResolution;
float4 _HBAOParams2;
float4 _NoiseParam;
float2 _ProjectionParams;
#define RADIUS _HBAOParams.x    //radius in practice
#define BIAS   _HBAOParams.y
#define NEG_RADIUSINVSQR _HBAOParams.z  
#define RADIUSINPIXEL _HBAOParams.w
#define SAMPLE_COUNT 8
#define IS_HALF_RESOLUTION _HalfResolution > 0
#define AO_INTENSITY _HBAOParams.x
#define NOISE_OFFSET _NoiseParam.xy
#define NOISE_SCALE _NoiseParam.zw
#define AOFADE_PARAM1 _HBAOParams2.x
#define AOFADE_PARAM2 _HBAOParams2.y
//aofade = AOFADE_PARAM1 * linearDepthCS + AOFADE_PARAM2

SamplerState s_point_clamp_sampler;
SamplerState s_point_repeat_sampler;
SamplerState s_linear_clamp_sampler;

//for test
#define USE_UNITY_SSAO 1

static const half HALF_POINT_ONE = half(0.1);
static const half HALF_MINUS_ONE = half(-1.0);
static const half HALF_ZERO = half(0.0);
static const half HALF_HALF = half(0.5);
static const half HALF_ONE = half(1.0);
static const half4 HALF4_ONE = half4(1.0, 1.0, 1.0, 1.0);
static const half HALF_TWO = half(2.0);
static const half HALF_TWO_PI = half(6.28318530717958647693);
static const half HALF_FOUR = half(4.0);
static const half HALF_NINE = half(9.0);
static const half HALF_HUNDRED = half(100.0);

// Hardcoded random UV values that improves performance.
// The values were taken from this function:
// r = frac(43758.5453 * sin( dot(float2(12.9898, 78.233), uv)) ));
// Indices  0 to 19 are for u = 0.0
// Indices 20 to 39 are for u = 1.0
static half SSAORandomUV[40] =
{
    0.00000000, // 00
    0.33984375, // 01
    0.75390625, // 02
    0.56640625, // 03
    0.98437500, // 04
    0.07421875, // 05
    0.23828125, // 06
    0.64062500, // 07
    0.35937500, // 08
    0.50781250, // 09
    0.38281250, // 10
    0.98437500, // 11
    0.17578125, // 12
    0.53906250, // 13
    0.28515625, // 14
    0.23137260, // 15
    0.45882360, // 16
    0.54117650, // 17
    0.12941180, // 18
    0.64313730, // 19

    0.92968750, // 20
    0.76171875, // 21
    0.13333330, // 22
    0.01562500, // 23
    0.00000000, // 24
    0.10546875, // 25
    0.64062500, // 26
    0.74609375, // 27
    0.67968750, // 28
    0.35156250, // 29
    0.49218750, // 30
    0.12500000, // 31
    0.26562500, // 32
    0.62500000, // 33
    0.44531250, // 34
    0.17647060, // 35
    0.44705890, // 36
    0.93333340, // 37
    0.87058830, // 38
    0.56862750, // 39
};

// Pseudo random number generator
half GetRandomVal(half u, half sampleIndex)
{
    return SSAORandomUV[u * 20 + sampleIndex];
}

// Sample point picker
half3 PickSamplePoint(float2 positionSS, int sampleIndex, half sampleIndexHalf, half rcpSampleCount, half3 normal_o)
{
#if defined(_BLUE_NOISE)
        const half lerpVal = sampleIndexHalf * rcpSampleCount;
        const half noise = SAMPLE_BLUE_NOISE(((uv + BlueNoiseOffset) * BlueNoiseScale) + lerpVal);
        const half u = frac(GetRandomVal(HALF_ZERO, sampleIndexHalf).x + noise) * HALF_TWO - HALF_ONE;
        const half theta = (GetRandomVal(HALF_ONE, sampleIndexHalf).x + noise) * HALF_TWO_PI * HALF_HUNDRED;
        const half u2 = half(sqrt(HALF_ONE - u * u));

        half3 v = half3(u2 * cos(theta), u2 * sin(theta), u);
        v *= (dot(normal_o, v) >= HALF_ZERO) * HALF_TWO - HALF_ONE;
        v *= lerp(0.1, 1.0, lerpVal * lerpVal);
#else
    const half noise = half(InterleavedGradientNoise(positionSS, sampleIndex));
    const half u = frac(GetRandomVal(HALF_ZERO, sampleIndex) + noise) * HALF_TWO - HALF_ONE;
    const half theta = (GetRandomVal(HALF_ONE, sampleIndex) + noise) * HALF_TWO_PI;
    const half u2 = half(sqrt(HALF_ONE - u * u));

    half3 v = half3(u2 * cos(theta), u2 * sin(theta), u);
    v *= sqrt((sampleIndexHalf + HALF_ONE) * rcpSampleCount);
    v = faceforward(v, -normal_o, v);
#endif

    v *= 0.25;
    return v;
}
//end

static const float SKY_DEPTH_VALUE = 0.00001;

static const float2 SPIRAL_KERNEL[SAMPLE_COUNT] =
{
    float2(0.0239522, 0.05772818),
    float2(-0.1733557, -0.07144266),
    float2(0.288354, -0.1204501),
    float2(-0.1657328, 0.4048937),
    float2(-0.2180493, -0.5185179),
    float2(0.6368818, 0.2589166),
    float2(-0.7482157, 0.3167484),
    float2(0.3509923, -0.8693162)
};

float GetPlatformDepth(float depth)
{
    return 1.0 - depth;
}

float3 UVtoViewPos(float2 uv, float depth)
{
    float2 clippos = uv * 2.0 - 1.0;
    
    float4 posView = mul(_ProjInverse, float4(clippos, 2.0 * depth - 1.0, 1));
    posView /= posView.w;
    return posView.xyz;
}

float HorizontalFalloff(float3 normal, float3 horizonVec)
{
    float NdotV = dot(normal, horizonVec);
    return saturate(NdotV - BIAS);

}

float DistanceFalloff(float distanceSqr)
{
    return saturate(distanceSqr * NEG_RADIUSINVSQR + 1.0);
}

//----------------------------------------------------------------------------------
// P = view-space position at the kernel center
// N = view-space normal at the kernel center
// S = view-space position of the current sample
//----------------------------------------------------------------------------------
float ComputeAO(float3 P, float3 N, float3 S)
{
    float3 V = S - P;
    float VdotV = dot(V, V);
    //if (VdotV < 0.01)
    //    return 0;
    //float NdotV = dot(N, V) * 1.0 / sqrt(VdotV);

    // Use saturate(x) instead of max(x,0.f) because that is faster on Kepler
    return HorizontalFalloff(N, normalize(V)) * DistanceFalloff(VdotV);
}

[numthreads(8,8,1)]
void HBAO (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint) _AOMaskSize.x || id.y >= (uint) _AOMaskSize.y)
    {
        return;
    }
    // TODO: insert actual code here!
    float2 uv = (float2) id.xy * _AOMaskSize.zw;
    float2 uvScreen = (float2) (id.xy + 0.5) * _AOMaskSize.zw; //uv + _ScreenSize.zw * 0.5 * (_HalfResolution + 1);

    float noise = InterleavedGradientNoise((float2) id.xy, id.y);
    //noise = _NoiseTexture.SampleLevel(s_point_repeat_sampler, uvScreen * NOISE_SCALE, 0);
    
    float theta = TWO_PI * noise;
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    float2x2 rotation = float2x2(cosTheta, -sinTheta,
                                 sinTheta, cosTheta );
    
    
    //int2 screenCoord = _ScreenSize * uv;
    float depth = _DepthTexture.SampleLevel(s_point_clamp_sampler, uvScreen, 0); //IS_HALF_RESOLUTION ? _DepthTexture.SampleLevel(s_linear_clamp_sampler, uvScreen, 0) : _DepthTexture.SampleLevel(s_point_clamp_sampler, uvScreen, 0); //_DepthTexture.Load(int3(screenCoord, 0));
    if (depth < SKY_DEPTH_VALUE)
    {
        _AOMask[id.xy] = 1;
        return;
    }
    depth = GetPlatformDepth(depth);
    
    
    //float depth = _DepthTexture.Load(int3(screenCoord, 0));
    float3 normal = _NormalTexture.SampleLevel(s_point_clamp_sampler, uvScreen, 0); //IS_HALF_RESOLUTION ? _NormalTexture.SampleLevel(s_linear_clamp_sampler, uvScreen, 0) : _NormalTexture.SampleLevel(s_point_clamp_sampler, uvScreen, 0); //_NormalTexture.Load(int3(screenCoord, 0));
    normal = 2.0 * normal - 1.0;
    
    float3 screenPosVS = UVtoViewPos(uvScreen, depth);
    float3 normalVS = mul((float3x3)_ViewMatrix, normal);
    normalVS = normalize(normalVS);

    half AOIntegrate = 0;
    float radiusPixel = RADIUSINPIXEL / screenPosVS.z;
    //float minLength = length(_ScreenSize.zw);
    //float pixelSizeSS2 = dot(_ScreenSize.zw, _ScreenSize.zw);
    float aoFade = saturate(AOFADE_PARAM1 * screenPosVS.z + AOFADE_PARAM2);
    const float2 halfTexelOffset = float2(-0.5f, -0.5f) * _AOMaskSize.zw;
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 samplePointVec = mul(rotation, SPIRAL_KERNEL[i]) * radiusPixel * _ScreenSize.zw;
        //if (dot(samplePointVec, samplePointVec) < pixelSizeSS2)
        //    continue;
        float2 samplePoint = samplePointVec + uvScreen;
        int2 samplePointPixel = (int2) (samplePoint * _ScreenSize.xy);
        //screenCoord = _ScreenSize * samplePoint;
        float depthSample = _DepthTexture.Load(int3(samplePointPixel, 0)); //_DepthTexture.SampleLevel(s_point_clamp_sampler, samplePoint, 0); //IS_HALF_RESOLUTION ? _DepthTexture.SampleLevel(s_linear_clamp_sampler, samplePoint, 0) : _DepthTexture.SampleLevel(s_point_clamp_sampler, samplePoint, 0); //_DepthTexture.Load(int3(screenCoord, 0));
        depthSample = GetPlatformDepth(depthSample);
        float2 adjustSamplePoint = ((float2) samplePointPixel + 0.5) * _ScreenSize.zw;
        float3 samplePointVS = UVtoViewPos(adjustSamplePoint, depthSample);
        int2 samplePointAOCoord = adjustSamplePoint * _AOMaskSize.xy;
        AOIntegrate += samplePointAOCoord == id.xy ? 0 : ComputeAO(screenPosVS, normalVS, samplePointVS) * AO_INTENSITY;
    }
    AOIntegrate = saturate(AOIntegrate / SAMPLE_COUNT);
    
    #if USE_UNITY_SSAO
    const half rcpSampleCount = half(rcp(SAMPLE_COUNT));
    half ao = HALF_ZERO;
    half sHalf = HALF_MINUS_ONE;
    for (int s = 0; s < SAMPLE_COUNT; s++)
    {
        sHalf += HALF_ONE;

        // Sample point
        half3 v_s1 = PickSamplePoint(uvScreen * _AOMaskSize.xy, s, sHalf, rcpSampleCount, normalVS);
        half3 vpos_s1 = half3(screenPosVS + v_s1);
    }
    #endif
    float fadedAO = lerp(1.0, 1.0 - AOIntegrate, aoFade);
    _AOMask[id.xy] = fadedAO;

}
