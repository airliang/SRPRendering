// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PresumVisibilityBuffer
#pragma enable_d3d11_debug_symbols
#define THREAD_NUM_X 128

StructuredBuffer<uint> _VisibilityBufferIn;
RWStructuredBuffer<uint> _GroupSumArray;
RWStructuredBuffer<uint> _ScannedInstancePredicates;

groupshared uint temp[2 * THREAD_NUM_X];

[numthreads(THREAD_NUM_X,1,1)]
void PresumVisibilityBuffer(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    int tID = (int)DTid.x;
    int groupTID = (int)GTid.x;
    int groupID = (int)groupId.x;

    int offset = 1;
    uint inputAddr = 2 * groupTID + groupId.x * THREAD_NUM_X;
    temp[2 * groupTID] = _VisibilityBufferIn[inputAddr]; // load input into shared memory
    temp[2 * groupTID + 1] = _VisibilityBufferIn[inputAddr + 1];
    int d;
    const int NoofElements = 2 * THREAD_NUM_X;

    //perform reduction
    for (d = NoofElements >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            temp[bi] += temp[ai];
        }
        offset <<= 1;
    }

    // clear the last element
    if (groupTID == 0)
    {
        _GroupSumArray[groupID] = temp[THREAD_NUM_X - 1];
        temp[NoofElements - 1] = 0;
    }

    //perform downsweep and build scan
    for (d = 1; d < NoofElements; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    uint outputIndex = groupId.x * THREAD_NUM_X + groupTID * 2;
    if ((2 * groupTID) < THREAD_NUM_X)
    {
        _ScannedInstancePredicates[outputIndex] = temp[2 * groupTID]; // store to main memory
        _ScannedInstancePredicates[outputIndex + 1] = temp[2 * groupTID + 1];
    }
}

#pragma kernel PresumGroup
StructuredBuffer<uint> _GroupSumArrayIn;
RWStructuredBuffer<uint> _GroupSumArrayOut;
int _GroupsNum;
int _GroupSumArrayInSize;
//--------------------------------------------------------------------------------------
// Kernels & Functions
//--------------------------------------------------------------------------------------

// Based on Parallel Prefix Sum (Scan) with CUDA by Mark Harris
[numthreads(THREAD_NUM_X, 1, 1)]
void PresumGroup(
    uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID
)
{
    int tID = (int)DTid.x;

    //int groupTID = (int)GTid.x;
    //int groupID = (int)groupId.x;

    //if ((2 * tID) < _GroupsNum)

    temp[2 * tID] = (2 * tID) < _GroupSumArrayInSize ? _GroupSumArrayIn[2 * tID] : 0; // load input into shared memory
    temp[2 * tID + 1] = (2 * tID + 1) < _GroupSumArrayInSize ? _GroupSumArrayIn[2 * tID + 1] : 0;


    int offset = 1;
    //perform reduction
    const int NoofElements = /*2 * */_GroupsNum;
    for (int d = NoofElements >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (tID < d)
        {
            int ai = offset * (2 * tID + 1) - 1;
            int bi = offset * (2 * tID + 2) - 1;
            temp[bi] += temp[ai];
        }
        offset *= 2;
    }

    // clear the last element
    if (tID == 0)
    {
        temp[NoofElements - 1] = 0;
    }

    //perform downsweep and build scan
    for (int d = 1; d < NoofElements; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();

        if (tID < d)
        {
            int ai = offset * (2 * tID + 1) - 1;
            int bi = offset * (2 * tID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();
    _GroupSumArrayOut[2 * tID] = 0; // store to main memory
    _GroupSumArrayOut[2 * tID + 1] = 0;
    if ((2 * tID) < _GroupSumArrayInSize)
    {
        _GroupSumArrayOut[2 * tID] = temp[2 * tID]; // store to main memory
        _GroupSumArrayOut[2 * tID + 1] = temp[2 * tID + 1];
    }
}

