// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols
#include "BakeAtmosphereScatteringInclude.hlsl"

TextureCube _InputCubemap;
SamplerState _LinearRepeat;
RWTexture2DArray<half4> _OutputCubemap0;
RWTexture2DArray<half4> _OutputCubemap1;
RWTexture2DArray<half4> _OutputCubemap2;
RWTexture2DArray<half4> _OutputCubemap3;
RWTexture2DArray<half4> _OutputCubemap4;
RWTexture2DArray<half4> _OutputCubemap5;

#define CUBEMAP_MIPNUMs 6
#define NUM_SAMPLES 64
#define PI 3.14159265359

float DistributionGGX(float3 N, float3 H, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// efficient VanDerCorpus calculation.
float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}
// ----------------------------------------------------------------------------
float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates - halfway vector
    //
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space H vector to world-space sample vector
    float3 up = abs(N.y) < 0.999 ? float3(0.0, 1.0, 0.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}
#define GROUPSIZE 64
[numthreads(GROUPSIZE, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint mipLevel = 0;
    if (id.x < 32 * 32)
    {
        mipLevel = 0;
    }
    else if (id.x < 32 * 32 + 16 * 16)
    {
        mipLevel = 1;
        id.x -= (32 * 32);
    }
    else if (id.x < 32 * 32 + 16 * 16 + 8 * 8)
    {
        mipLevel = 2;
        id.x -= (32 * 32 + 16 * 16);
    }
    else if (id.x < 32 * 32 + 16 * 16 + 8 * 8 + 4 * 4)
    {
        mipLevel = 3;
        id.x -= (32 * 32 + 16 * 16 + 8 * 8);
    }
    else if (id.x < 32 * 32 + 16 * 16 + 8 * 8 + 4 * 4 + 2 * 2)
    {
        mipLevel = 4;
        id.x -= (32 * 32 + 16 * 16 + 8 * 8 + 4 * 4);
    }
    else if (id.x < 32 * 32 + 16 * 16 + 8 * 8 + 4 * 4 + 2 * 2 + 1)
    {
        mipLevel = 5;
        id.x -= (32 * 32 + 16 * 16 + 8 * 8 + 4 * 4 + 2 * 2);
    }
    else
    {
        return;
    }
    
    float roughness = (float) mipLevel / (CUBEMAP_MIPNUMs - 1);

    int res = CUBEMAP_SIZE >> mipLevel;
    float inv_res_mip = rcp((float) res);
    id.y = id.x / res;
    id.x -= id.y * res;
    
    if (id.x < res && id.y < res)
    {
        float2 uv = ((float2) id.xy + 0.5) * inv_res_mip * 2 - 1;
        
        float3 normal = GetDirection(uv, id.z);
        
        // make the simplyfying assumption that V equals R equals the normal 
        float3 R = normal;
        float3 V = R;

        const uint SAMPLE_COUNT = 64;
        half3 prefilteredColor = half3(0.0, 0.0, 0.0);
        float totalWeight = 0.0;

        for (uint i = 0u; i < SAMPLE_COUNT; ++i)
        {
                    // generates a sample vector that's biased towards the preferred alignment direction (importance sampling).
            float2 Xi = Hammersley(i, SAMPLE_COUNT);
            float3 H = ImportanceSampleGGX(Xi, normal, roughness);
            float3 L = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(normal, L), 0.0);
            if (NdotL > 0.0)
            {
                // sample from the environment's mip level based on roughness/pdf
                float D = DistributionGGX(normal, H, roughness);
                float NdotH = max(dot(normal, H), 0.0);
                float HdotV = max(dot(H, V), 0.0);
                float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;

                float resolution = 32.0; // resolution of source cubemap (per face)

                //
                float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
                float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

                float mip = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

                prefilteredColor += _InputCubemap.SampleLevel(_LinearRepeat, L, mip).rgb * NdotL;

                totalWeight += NdotL;
            }
        }

        prefilteredColor = prefilteredColor / totalWeight;
        half4 color = half4(prefilteredColor, 1);
#if !defined(UNITY_COLORSPACE_GAMMA)
        //prefilteredColor.rgb = pow(prefilteredColor.rgb, 2.2);
#endif
        switch (mipLevel)
        {
            case 0:
                _OutputCubemap0[id] = color;
                break;
            case 1:
                _OutputCubemap1[id] = color;
                break;
            case 2:
                _OutputCubemap2[id] = color;
                break;
            case 3:
                _OutputCubemap3[id] = color;
                break;
            case 4:
                _OutputCubemap4[id] = color;
                break;
            case 5:
                _OutputCubemap5[id] = color;
                break;
            default:
                break;
        }
        //_Cubemap[id] = half4(prefilteredColor, 1);
    }
}
