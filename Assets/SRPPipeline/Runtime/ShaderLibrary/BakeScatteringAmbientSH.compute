

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PresumSHCoefficient
#pragma enable_d3d11_debug_symbols
#include "AtmosphereScattering.hlsl"
#include "SHUtils.hlsl"

#define _OPTIMIZE_BAKE 1

#pragma multi_compile _ _BAKE_CUBEMAP

float3 _MainLightPosition;
float _MainLightIntensity;
Texture3D<float4> _SkyboxLUT;

#if defined(_BAKE_CUBEMAP)
TextureCube<float4> _Cubemap;
SamplerState _LinearClamp;

half3 GetSkyColor(float3 viewDirWS)
{
    return _Cubemap.SampleLevel(_LinearClamp, viewDirWS, 0);
}
#else


half3 GetSkyColor(float3 viewDirWS, float3 sunDir)
{
    float w, h, d;
    _SkyboxLUT.GetDimensions(w, h, d);
    // Reverse it to point into the scene
    float3 rayStart = float3(0, 1, 0);
    float3 earthCenter = float3(0, -_EarthRadius, 0);
    float height = max(length(rayStart - earthCenter) - _EarthRadius, 0);
    float3 groundNormal = normalize(rayStart - earthCenter);
    float cosView = dot(groundNormal, viewDirWS);
    float cosSun = dot(groundNormal, -sunDir);

    float3 texCoords;
    texCoords.x = pow(height / _AtmosphereHeight, 0.5);
    float ch = -sqrt(height * (2 * _EarthRadius + height)) / (_EarthRadius + height);

    texCoords.y = cosView > ch ? (0.5 * pow((cosView - ch) / (1.0 - ch), 0.2) + 0.5)
        : (0.5 * pow((ch - cosView) / (1.0 + ch), 0.2));

    texCoords.z = 0.5 * ((atan(max(cosSun, -0.1975) * tan(1.26 * 1.1)) / 1.1) + (1 - 0.26));
    int3 texCoordsInt = int3(texCoords * float3(w, h, d));
    half4 scattering = _SkyboxLUT[texCoordsInt]; //tex3D(_SkyboxLUT, texCoords);
    //return scattering;
    //
    float cosTheta = dot(viewDirWS, -sunDir);
    half3 scatteringR = scattering.rgb * GetModifyRayleighPhase(cosTheta) * _BetaRayleigh / (4.0 * PI);
    half3 sM = scattering.rgb * scattering.w / scattering.r;
    half3 scatteringM = sM * GetHGMiePhase(cosTheta, _MieG) * _BetaMie / (4.0 * PI);
    half3 skyColor = (scatteringR + scatteringM) * _MainLightIntensity * _SunLightColor;
    return skyColor;
}
#endif



#define SAMPLE_COUNT 512
#define THREAD_NUM_X 128

#if _OPTIMIZE_BAKE
RWTexture2D<float4> _SHCoefficients;
groupshared float4 TempSH[THREAD_NUM_X * 2];
#else
RWStructuredBuffer<SHCoefficientL2> _SHCoefficients;
groupshared SHCoefficientL2 TempSH[THREAD_NUM_X * 2];
#endif

StructuredBuffer<float4> _BakeSamples;




void PreSumArray(int thid, int GroupNumElement)
{
    int offset = 1;
    //up pass
    for (int d = GroupNumElement >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if (thid < d)
        {
            int ai = offset * (2 * thid + 1) - 1;
            int bi = offset * (2 * thid + 2) - 1;
#if _OPTIMIZE_BAKE
            TempSH[bi] += TempSH[ai];
#else
            TempSH[bi].c0 += TempSH[ai].c0;
            TempSH[bi].c1 += TempSH[ai].c1;
            TempSH[bi].c2 += TempSH[ai].c2;
            TempSH[bi].c3 += TempSH[ai].c3;
            TempSH[bi].c4 += TempSH[ai].c4;
            TempSH[bi].c5 += TempSH[ai].c5;
            TempSH[bi].c6 += TempSH[ai].c6;
            TempSH[bi].c7 += TempSH[ai].c7;
            TempSH[bi].c8 += TempSH[ai].c8;
            TempSH[bi].pack += TempSH[ai].pack;
#endif
        }
        offset <<= 1;
    }
}



[numthreads(THREAD_NUM_X,1,1)]
void PresumSHCoefficient(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    uint thid = GTid.x;
    uint textureAddr = 2 * thid + groupId.x * THREAD_NUM_X;
    
    float3 sunDir = -normalize(_MainLightPosition.xyz);
    //calculate the incoming light from the atmosphere
    
#if _OPTIMIZE_BAKE
    float3 sh = (float3)0;
    if (textureAddr < SAMPLE_COUNT)
    {
        float3 viewDirWS = _BakeSamples[textureAddr];
#if defined(_BAKE_CUBEMAP)
        half3 skyColor = GetSkyColor(viewDirWS.xyz);
#else
        half3 skyColor = GetSkyColor(viewDirWS.xyz, sunDir);
#endif
        sh = Y(groupId.y, viewDirWS) * skyColor;
    }

    TempSH[2 * thid] = float4(sh, 0);

    uint textureAddrNext = textureAddr + 1;
    float3 shNext = 0;
    if (textureAddrNext < SAMPLE_COUNT)
    {
        float3 viewDirWS = _BakeSamples[textureAddrNext];
#if defined(_BAKE_CUBEMAP)
        half3 skyColor = GetSkyColor(viewDirWS.xyz);
#else
        half3 skyColor = GetSkyColor(viewDirWS.xyz, sunDir);
#endif
        shNext = Y(groupId.y, viewDirWS) * skyColor;
    }
    TempSH[2 * thid + 1] = float4(shNext, 0);

    PreSumArray(thid, THREAD_NUM_X);

    GroupMemoryBarrierWithGroupSync();
    uint2 outputTextureAddr = uint2(groupId.x * THREAD_NUM_X + thid * 2, groupId.y);
    uint2 outputTextureAddr1 = uint2(groupId.x * THREAD_NUM_X + thid * 2 + 1, groupId.y);
    if ((2 * thid) < THREAD_NUM_X)
    {
        _SHCoefficients[outputTextureAddr] = outputTextureAddr.x < SAMPLE_COUNT ? TempSH[2 * thid] : 0;
    }
    if ((2 * thid + 1) < THREAD_NUM_X)
    {
        _SHCoefficients[outputTextureAddr1] = outputTextureAddr1.x < SAMPLE_COUNT ? TempSH[2 * thid + 1] : 0;
    }
#else
    SHCoefficientL2 sh = (SHCoefficientL2)0;
    SHCoefficientL2 zeroSh = (SHCoefficientL2)0;
    
    
    if (textureAddr < SAMPLE_COUNT)
    {
        float3 viewDirWS = _BakeSamples[textureAddr];
#if defined(_BAKE_CUBEMAP)
        half3 skyColor = GetSkyColor(viewDirWS.xyz);
#else
        half3 skyColor = GetSkyColor(viewDirWS.xyz, sunDir);
#endif
        sh.c0 = skyColor * 0.2820947917;
        sh.c1 = Y1(viewDirWS) * skyColor;
        sh.c2 = Y2(viewDirWS) * skyColor;
        sh.c3 = Y3(viewDirWS) * skyColor;
        sh.c4 = Y4(viewDirWS) * skyColor;
        sh.c5 = Y5(viewDirWS) * skyColor;
        sh.c6 = Y6(viewDirWS) * skyColor;
        sh.c7 = Y7(viewDirWS) * skyColor;
        sh.c8 = Y8(viewDirWS) * skyColor;
        sh.pack = 1.0;
    }

    TempSH[2 * thid] = sh;//textureAddr.x < SAMPLE_COUNT ? sh : zeroSh;

    uint textureAddrNext = textureAddr + 1;
    SHCoefficientL2 shNext = (SHCoefficientL2)0;
    if (textureAddrNext < SAMPLE_COUNT)
    {
        float3 viewDirWS = _BakeSamples[textureAddrNext];
#if defined(_BAKE_CUBEMAP)
        half3 skyColor = GetSkyColor(viewDirWS.xyz);
#else
        half3 skyColor = GetSkyColor(viewDirWS.xyz, sunDir);
#endif
        shNext.c0 = skyColor * 0.2820947917;
        shNext.c1 = Y1(viewDirWS) * skyColor;
        shNext.c2 = Y2(viewDirWS) * skyColor;
        shNext.c3 = Y3(viewDirWS) * skyColor;
        shNext.c4 = Y4(viewDirWS) * skyColor;
        shNext.c5 = Y5(viewDirWS) * skyColor;
        shNext.c6 = Y6(viewDirWS) * skyColor;
        shNext.c7 = Y7(viewDirWS) * skyColor;
        shNext.c8 = Y8(viewDirWS) * skyColor;
        shNext.pack = 1.0;
    }
    TempSH[2 * thid + 1] = shNext;

    PreSumArray(thid);

    GroupMemoryBarrierWithGroupSync();
    uint outputTextureAddr = groupId.x * THREAD_NUM_X + thid * 2;
    uint outputTextureAddr1 = groupId.x * THREAD_NUM_X + thid * 2 + 1;
    if ((2 * thid) < THREAD_NUM_X)
    {
        if (outputTextureAddr < SAMPLE_COUNT)
        {
            _SHCoefficients[outputTextureAddr] = TempSH[2 * thid + 1];
        }
        else
        {
            _SHCoefficients[outputTextureAddr] = zeroSh;
        }
    }
    if ((2 * thid + 1) < THREAD_NUM_X)
    {
        if (outputTextureAddr1 < SAMPLE_COUNT)
        {
            _SHCoefficients[outputTextureAddr1] = TempSH[2 * thid + 2];
        }
        else
        {
            _SHCoefficients[outputTextureAddr1] = zeroSh;
        }
    }
#endif
}

#pragma kernel PreSumGroupSH
int _ArrayLengthPerThreadGroup;
int _GroupsNumPowOf2;
#if _OPTIMIZE_BAKE
Texture2D<float4> _InputSHCoefficients;
RWTexture2D<float4> _SHCoefficientsGroupSumArray;
#else
StructuredBuffer<SHCoefficientL2> _InputSHCoefficients;
RWStructuredBuffer<SHCoefficientL2> _SHCoefficientsGroupSumArray;
#endif
[numthreads(THREAD_NUM_X, 1, 1)]
void PreSumGroupSH(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
    // TODO: insert actual code here!
#if _OPTIMIZE_BAKE
    uint w,h;
    _InputSHCoefficients.GetDimensions(w, h);
    uint thid = DTid.x;
    uint2 textureAddr = uint2((2 * thid + 1) * THREAD_NUM_X - 1, groupId.y);
    uint2 textureAddr1 = uint2((2 * thid + 2) * THREAD_NUM_X - 1, groupId.y);

    TempSH[2 * thid] = textureAddr.x < w ? _InputSHCoefficients[textureAddr] : 0;
    TempSH[2 * thid + 1] = textureAddr1.x < w ? _InputSHCoefficients[textureAddr1] : 0;

    PreSumArray(thid, _GroupsNumPowOf2);

    GroupMemoryBarrierWithGroupSync();
    if ((2 * thid) < _ArrayLengthPerThreadGroup)
    {
        uint2 outputAddress = uint2(2 * thid, groupId.y);
        _SHCoefficientsGroupSumArray[outputAddress] = TempSH[2 * thid];
    }
    if ((2 * thid + 1) < _ArrayLengthPerThreadGroup)
    {
        uint2 outputAddress = uint2(2 * thid + 1, groupId.y);
        _SHCoefficientsGroupSumArray[outputAddress] = TempSH[2 * thid + 1];
    }
#else
    uint shCoefBufLength;
    uint shCoefStride;
    _InputSHCoefficients.GetDimensions(shCoefBufLength, shCoefStride);
    uint thid = DTid.x;
    uint textureAddr = (2 * thid + 1) * THREAD_NUM_X - 1;
    uint textureAddr1 = (2 * thid + 2) * THREAD_NUM_X - 1;
    SHCoefficientL2 zeroSh = (SHCoefficientL2)0;
    if (textureAddr < shCoefBufLength)
    {
        TempSH[2 * thid] = _InputSHCoefficients[textureAddr];
    }
    else
    {
        TempSH[2 * thid] = zeroSh;
    }

    if (textureAddr1 < shCoefBufLength)
    {
        TempSH[2 * thid + 1] = _InputSHCoefficients[textureAddr1];
    }
    else
    {
        TempSH[2 * thid + 1] = zeroSh;
    }

    PreSumArray(thid, _ArrayLengthPerThreadGroup);

    GroupMemoryBarrierWithGroupSync();
    if ((2 * thid) < _ArrayLengthPerThreadGroup)
    {
        uint outputAddress = 2 * thid;
        _SHCoefficientsGroupSumArray[outputAddress] = TempSH[2 * thid + 1];
    }
    if ((2 * thid + 1) < _ArrayLengthPerThreadGroup)
    {
        uint outputAddress = 2 * thid + 1;
        _SHCoefficientsGroupSumArray[outputAddress] = TempSH[2 * thid + 2];
    }
#endif
}

#pragma kernel BakeSHToTexture

/*
float4 _fC0to3;
float _fC4;

PolynomialSHL2 GetEnvmapSHPolyCoef(SHCoefficientL2 sh)
{
    PolynomialSHL2 polyShCoef;
    float fC0 = _fC0to3.x;
    float fC1 = _fC0to3.y;
    float fC2 = _fC0to3.z;
    float fC3 = _fC0to3.w;
    polyShCoef.SHAr = float4(-fC1 * sh.c3.x, -fC1 * sh.c1.x, fC1 * sh.c2.x, fC0 * sh.c0.x - fC3 * sh.c6.x);
    polyShCoef.SHAg = float4(-fC1 * sh.c3.y, -fC1 * sh.c1.y, fC1 * sh.c2.y, fC0 * sh.c0.y - fC3 * sh.c6.y);
    polyShCoef.SHAb = float4(-fC1 * sh.c3.z, -fC1 * sh.c1.z, fC1 * sh.c2.z, fC0 * sh.c0.z - fC3 * sh.c6.z);

    polyShCoef.SHBr = float4(fC2 * sh.c4.x, -fC2 * sh.c5.x, 3.0f * fC2 * sh.c6.x, -fC2 * sh.c7.x);
    polyShCoef.SHBg = float4(fC2 * sh.c4.y, -fC2 * sh.c5.y, 3.0f * fC2 * sh.c6.y, -fC2 * sh.c7.y);
    polyShCoef.SHBb = float4(fC2 * sh.c4.z, -fC2 * sh.c5.z, 3.0f * fC2 * sh.c6.z, -fC2 * sh.c7.z);

    polyShCoef.SHC = float4(_fC4 * sh.c8.x, _fC4 * sh.c8.y, _fC4 * sh.c8.z, 1.0);

    return polyShCoef;
}
*/

PolynomialSHL2 GetSHPolyCoef(SHCoefficientL2 sh)
{
    PolynomialSHL2 polyShCoef;

    return polyShCoef;
}

#if _OPTIMIZE_BAKE
Texture2D<float4> _SHCoefficientsGroupSumArrayInput;
#else
StructuredBuffer<SHCoefficientL2> _SHCoefficientsGroupSumArrayInput;
#endif
RWStructuredBuffer<SHCoefficientL2> _FinalProjSH;
[numthreads(1, 1, 1)]
void BakeSHToTexture(uint3 DTid : SV_DispatchThreadID)
{
#if _OPTIMIZE_BAKE
    uint w, h;
    _SHCoefficientsGroupSumArrayInput.GetDimensions(w, h);
    int lastElementIndex = w - 1;
    SHCoefficientL2 sh = (SHCoefficientL2)0;
    sh.c0 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 0)];
    sh.c1 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 1)];
    sh.c2 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 2)];
    sh.c3 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 3)];
    sh.c4 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 4)];
    sh.c5 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 5)];
    sh.c6 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 6)];
    sh.c7 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 7)];
    sh.c8 = _SHCoefficientsGroupSumArrayInput[uint2(lastElementIndex, 8)];
#else
    uint shCoefBufLength;
    uint shCoefStride;
    _SHCoefficientsGroupSumArrayInput.GetDimensions(shCoefBufLength, shCoefStride);
    int lastElementIndex = shCoefBufLength - 1;
    SHCoefficientL2 sh = _SHCoefficientsGroupSumArrayInput[lastElementIndex];
#endif
    float factor = 4.0 * PI / SAMPLE_COUNT;
    sh.c0 *= factor;
    sh.c1 *= factor;
    sh.c2 *= factor;
    sh.c3 *= factor;
    sh.c4 *= factor;
    sh.c5 *= factor;
    sh.c6 *= factor;
    sh.c7 *= factor;
    sh.c8 *= factor;
    _FinalProjSH[0] = sh;//GetEnvmapSHPolyCoef(sh);
    //_OutputProjSH[uint2(0, 0)] = sh.c0;
    //_OutputProjSH[uint2(1, 0)] = sh.c1;
    //_OutputProjSH[uint2(2, 0)] = sh.c2;
    //_OutputProjSH[uint2(3, 0)] = sh.c3;
    //_OutputProjSH[uint2(4, 0)] = sh.c4;
    //_OutputProjSH[uint2(5, 0)] = sh.c5;
    //_OutputProjSH[uint2(6, 0)] = sh.c6;
    //_OutputProjSH[uint2(7, 0)] = sh.c7;
    //_OutputProjSH[uint2(8, 0)] = sh.c8;
}

#pragma kernel BakeSHDirect
[numthreads(1, 1, 1)]
void BakeSHDirect(uint3 DTid : SV_DispatchThreadID)
{
    float3 sunDir = -normalize(_MainLightPosition.xyz);
    SHCoefficientL2 sh = (SHCoefficientL2)0;
    float weightSum = 0;
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
        float4 bakeSample = _BakeSamples[i];
        float3 viewDirWS = bakeSample.xyz;
        float  weight = bakeSample.w;
#if defined(_BAKE_CUBEMAP)
        half3 skyColor = GetSkyColor(viewDirWS.xyz);
#else
        half3 skyColor = GetSkyColor(viewDirWS.xyz, sunDir);
#endif
        sh.c0 += skyColor * 0.2820947917;
        sh.c1 += Y1(viewDirWS) * skyColor * weight;
        sh.c2 += Y2(viewDirWS) * skyColor * weight;
        sh.c3 += Y3(viewDirWS) * skyColor * weight;
        sh.c4 += Y4(viewDirWS) * skyColor * weight;
        sh.c5 += Y5(viewDirWS) * skyColor * weight;
        sh.c6 += Y6(viewDirWS) * skyColor * weight;
        sh.c7 += Y7(viewDirWS) * skyColor * weight;
        sh.c8 += Y8(viewDirWS) * skyColor * weight;
        weightSum += weight;
    }

    float factor = 4.0 * PI / weightSum;
    sh.c0 *= factor;
    sh.c1 *= factor;
    sh.c2 *= factor;
    sh.c3 *= factor;
    sh.c4 *= factor;
    sh.c5 *= factor;
    sh.c6 *= factor;
    sh.c7 *= factor;
    sh.c8 *= factor;
    _FinalProjSH[0] = sh;//GetEnvmapSHPolyCoef(sh);
}